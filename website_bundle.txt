===============================================================================
 ПРОЕКТНЫЙ БАНДЛ
 Создан: 2025-04-29 10:53:05
 Исходная директория: A:\Progects\letopisets-website
===============================================================================

--- START OF FILE: .gitignore ---

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


--- END OF FILE: .gitignore ---

-------------------------------------------------------------------------------

--- START OF FILE: package.json ---

{
  "name": "letopisets-website",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "prisma:seed": "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
  },
  "dependencies": {
    "@radix-ui/react-separator": "^1.1.4",
    "@radix-ui/react-slot": "^1.2.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "copy-to-clipboard": "^3.3.3",
    "framer-motion": "^12.9.2",
    "lucide-react": "^0.503.0",
    "next": "15.3.1",
    "qrcode.react": "^4.2.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-markdown": "^10.1.0",
    "remark-gfm": "^4.0.1",
    "tailwind-merge": "^3.2.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.3.1",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "tailwindcss-animate": "^1.0.7",
    "ts-node": "^10.9.2",
    "typescript": "^5"
  },
  "prisma": {
    "seed": "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
  }
}


--- END OF FILE: package.json ---

-------------------------------------------------------------------------------

--- START OF FILE: postcss.config.mjs ---

/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
export default config;

--- END OF FILE: postcss.config.mjs ---

-------------------------------------------------------------------------------

--- START OF FILE: README.md ---

This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


--- END OF FILE: README.md ---

-------------------------------------------------------------------------------

--- START OF FILE: tailwind.config.ts ---

// tailwind.config.ts
import type { Config } from "tailwindcss"
import tailwindcssAnimate from "tailwindcss-animate" // <--- Импорт вместо require
import tailwindcssTypography from "@tailwindcss/typography" 

const config = {
  darkMode: "class", // Используем класс 'dark' для темной темы
  content: [
    './pages/**/*.{ts,tsx}', // На всякий случай, если есть старые страницы
    './components/**/*.{ts,tsx}', // Папка компонентов shadcn/ui
    './app/**/*.{ts,tsx}', // Папка App Router
    './src/**/*.{ts,tsx}', // Включаем всю папку src
	],
  prefix: "", // Убираем префикс tw- (если не нужен)
  theme: {
    container: {
      center: true,
      padding: "1rem", // Уменьшаем паддинг по умолчанию
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
       // Здесь можно расширять стандартную тему Tailwind,
       // но основные цвета и радиусы у вас задаются через CSS переменные
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
       backgroundImage: { // Пример добавления своего значения (если нужно)
         'gradient-dark': 'linear-gradient(180deg, hsl(var(--background)) 0%, hsl(var(--muted)) 100%)',
       }
    },
  },
  plugins: [
    tailwindcssAnimate,      
    tailwindcssTypography     
  ],
} satisfies Config

export default config

--- END OF FILE: tailwind.config.ts ---

-------------------------------------------------------------------------------

--- START OF FILE: tsconfig.json ---

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "~/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


--- END OF FILE: tsconfig.json ---

-------------------------------------------------------------------------------

--- START OF FILE: src/app/globals.css ---

/* src/app/globals.css */

/* 1. Стандартные директивы Tailwind */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* 2. Определение CSS переменных для тем (основной способ) */
@layer base {
  /* :root определяет переменные для светлой темы (если она используется) */
  /* и как fallback, если темная тема не активна */
  :root {
    --radius: 0.625rem; /* Радиус скругления */

    /* Цвета в формате HSL (как ожидает shadcn/ui по умолчанию) */
    --background: 0 0% 100%; /* white */
    --foreground: 222.2 84% 4.9%; /* near black */

    --muted: 210 40% 96.1%; /* light gray */
    --muted-foreground: 215.4 16.3% 46.9%; /* gray */

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --border: 214.3 31.8% 91.4%; /* light gray border */
    --input: 214.3 31.8% 91.4%;

    --primary: 221.2 83.2% 53.3%; /* blue */
    --primary-foreground: 210 40% 98%; /* near white */

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%; /* red */
    --destructive-foreground: 210 40% 98%;

    --ring: 221.2 83.2% 53.3%; /* blue ring */

    /* Переменные для шрифтов (если нужны) */
    /* --font-sans: "Your Sans Font", sans-serif; */
    /* --font-mono: "Your Mono Font", monospace; */
  }

  /* .dark определяет переменные для темной темы */
  .dark {
    /* Значения HSL, подобраны для темного дизайна со скриншотов */
    --background: 224 71% 4%;    /* Очень темный синий */
    --foreground: 210 40% 98%;    /* Почти белый */

    --muted: 217 33% 17%;       /* Темно-серый/синий для приглушенных фонов */
    --muted-foreground: 215 20% 65%; /* Сероватый для приглушенного текста */

    --popover: 224 71% 6%;       /* Чуть светлее фона для всплывающих окон */
    --popover-foreground: 210 40% 98%;

    --card: 224 71% 9%;         /* Темно-синий для карточек */
    --card-foreground: 210 40% 98%;

    --border: 217 33% 25%;       /* Темно-серо-синий для границ */
    --input: 217 33% 25%;        /* Цвет фона инпутов */

    --primary: 217 91% 60%;       /* Яркий синий */
    --primary-foreground: 210 40% 98%; /* Светлый текст на синем */

    --secondary: 217 33% 17%;     /* Такой же как muted */
    --secondary-foreground: 210 40% 98%;

    --accent: 217 33% 20%;       /* Чуть светлее muted/secondary для акцентного фона */
    --accent-foreground: 210 40% 98%;

    --destructive: 0 63% 45%;     /* Более темный красный */
    --destructive-foreground: 210 40% 98%;

    --ring: 217 91% 70%;         /* Более светлый синий для кольца фокуса */
  }
}

/* 3. Базовые стили для HTML и Body */
@layer base {
  * {
    @apply border-border; /* Применяем цвет границы по умолчанию */
    /* Можно добавить box-sizing: border-box; если нужно */
    /* box-sizing: border-box; */
  }
  html {
    scroll-behavior: smooth; /* Плавная прокрутка */
    /* Улучшение рендеринга шрифтов */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
  }
  body {
    @apply bg-background text-foreground min-h-screen;
    font-feature-settings: "rlig" 1, "calt" 1; /* Включаем лигатуры */
    /* font-family: var(--font-sans); /* Если используете кастомный шрифт */
  }

  /* Стилизация скроллбара (опционально) */
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  ::-webkit-scrollbar-track {
    background: hsl(var(--background) / 0.1); /* Полупрозрачный фон трека */
    border-radius: 4px;
  }
  ::-webkit-scrollbar-thumb {
    background: hsl(var(--border)); /* Цвет бегунка */
    border-radius: 4px;
    border: 1px solid hsl(var(--background)); /* Небольшая обводка */
  }
  ::-webkit-scrollbar-thumb:hover {
    background: hsl(var(--muted-foreground)); /* Цвет при наведении */
  }
}

/* 4. Стили для контента, сгенерированного из Markdown (замена prose) */
@layer components {
  .markdown-content { /* Используйте этот класс на div вокруг ReactMarkdown */
    & h1 { @apply text-3xl font-bold mt-8 mb-6 pb-2 border-b border-border text-foreground; }
    & h2 { @apply text-2xl font-semibold mt-6 mb-4 pb-2 border-b border-border text-foreground; }
    & h3 { @apply text-xl font-semibold mt-5 mb-3 text-foreground; }
    & p { @apply text-base text-muted-foreground leading-relaxed my-4; }
    & a { @apply text-primary font-medium underline hover:text-primary/80; } /* Добавил underline по умолчанию */
    & ul { @apply list-disc pl-5 my-4 space-y-1.5; }
    & ol { @apply list-decimal pl-5 my-4 space-y-1.5; }
    & li { @apply text-muted-foreground ml-2; } /* Добавил небольшой отступ слева */
    & li > p { @apply my-0; } /* Убираем лишние отступы параграфов в списках */
    & strong { @apply font-semibold text-foreground; }
    & blockquote { @apply border-l-4 border-primary pl-4 italic text-muted-foreground my-4 py-1; } /* Добавил верт. паддинг */
    & code:not(pre code) { /* Стили для inline code */
      @apply text-sm text-foreground font-mono bg-muted/80 px-1.5 py-0.5 rounded mx-0.5;
      /* Убираем псевдоэлементы, если они добавляются */
      &::before, &::after { content: none; }
    }
    & pre { /* Стили для блоков кода */
      @apply bg-muted p-4 rounded-md overflow-x-auto my-4 text-sm;
    }
    & pre code { /* Стили для кода внутри pre */
      @apply bg-transparent p-0 text-foreground; /* Сбрасываем фон и паддинги */
    }
    & hr { /* Горизонтальная линия */
        @apply border-t border-border my-6;
    }
    /* Добавьте стили для других тегов Markdown по мере необходимости (table, img и т.д.) */
  }
}

--- END OF FILE: src/app/globals.css ---

-------------------------------------------------------------------------------

--- START OF FILE: src/app/layout.tsx ---

// src/app/layout.tsx
import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
// import { Providers } from "./providers"; // <-- УДАЛИТЬ
import { LanguageProvider } from "./_components/LanguageProvider"; // <-- ИМПОРТИРОВАТЬ
import SiteLayout from "./_components/SiteLayout";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = { /* ... */ };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="dark" suppressHydrationWarning>
      <body className={`${inter.className} antialiased`}>
        {/* Используем LanguageProvider напрямую */}
        <LanguageProvider>
          <SiteLayout>
            {children}
          </SiteLayout>
        </LanguageProvider>
      </body>
    </html>
  );
}

--- END OF FILE: src/app/layout.tsx ---

-------------------------------------------------------------------------------

--- START OF FILE: src/app/faq/page.tsx ---

// src/app/faq/page.tsx
"use client";
import React from "react";
import { useLanguage } from "../_components/LanguageProvider"; // Путь к вашим компонентам
import { Card, CardContent, CardHeader, CardTitle } from "~/components/ui/card";
import { Button } from "~/components/ui/button";
import { HelpCircle, MessageSquare, Send, LifeBuoy } from "lucide-react";

export default function FaqPage() {
   // Получаем весь объект контента
  const { language, currentContent, t } = useLanguage(); // t все еще нужен для fallback/простых строк

  // Берем данные из объекта
  const faqItems = currentContent.faq_items || [];
  const supportChannelLink = currentContent.support_channel_link || '#';
  const developerContactLink = currentContent.developer_contact_link || '#';
  const feedbackContactLink = currentContent.feedback_contact_link || developerContactLink; // Fallback на контакт разраба

  // Тексты берем тоже из объекта
  const supportSectionTitle = currentContent.support_section_title;
  const supportChannelCardTitle = currentContent.support_channel_card_title;
  const supportChannelCardText = currentContent.support_channel_card_text;
  const supportChannelButtonText = currentContent.support_channel_button;
  const developerContactCardTitle = currentContent.developer_contact_card_title;
  const developerContactCardText = currentContent.developer_contact_card_text;
  const developerContactButtonText = currentContent.developer_contact_button;
  const faqSectionTitle = currentContent.faq_section_title;
  const feedbackCardTitle = currentContent.feedback_card_title;
  const feedbackCardText = currentContent.feedback_card_text;
  const feedbackButtonText = currentContent.feedback_button;

  // Лоадер больше не нужен, т.к. данные статичны

  return (
    <div className="container mx-auto px-4 py-16">
      <h1 className="text-3xl md:text-4xl font-bold mb-12 md:mb-16 text-center text-foreground">
        {currentContent.faq_page_title || (language === "ru" ? "Поддержка / FAQ" : "Support / FAQ")}
      </h1>

       {/* Секция Поддержки */}
       <section className="mb-14 md:mb-16">
        <h2 className="text-2xl font-semibold mb-8 text-center md:text-left text-foreground">
          {supportSectionTitle}
        </h2>
         <div className="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8">
           <Card className="bg-card border border-border shadow-sm flex flex-col rounded-lg overflow-hidden">
            <CardHeader className="px-5 pt-5 pb-3">
               <CardTitle className="text-lg font-semibold flex items-center gap-2">
                <MessageSquare className="h-5 w-5 text-primary flex-shrink-0"/>
                 {supportChannelCardTitle}
               </CardTitle>
             </CardHeader>
             <CardContent className="px-5 pb-5 flex-grow flex flex-col justify-between">
               <p className="mb-5 text-sm text-muted-foreground leading-relaxed">
                 {supportChannelCardText}
              </p>
               {supportChannelLink && supportChannelLink !== '#' && (
                <Button asChild className="w-full mt-auto" size="default" variant="default"><a href={supportChannelLink} target="_blank" rel="noopener noreferrer">{supportChannelButtonText}</a></Button>
              )}
            </CardContent>
          </Card>
           <Card className="bg-card border border-border shadow-sm flex flex-col rounded-lg overflow-hidden">
             <CardHeader className="px-5 pt-5 pb-3">
               <CardTitle className="text-lg font-semibold flex items-center gap-2">
                <Send className="h-5 w-5 text-primary flex-shrink-0"/>
                 {developerContactCardTitle}
              </CardTitle>
             </CardHeader>
             <CardContent className="px-5 pb-5 flex-grow flex flex-col justify-between">
               <p className="mb-5 text-sm text-muted-foreground leading-relaxed">
                {developerContactCardText}
              </p>
               {developerContactLink && developerContactLink !== '#' && (
                 <Button asChild className="w-full mt-auto" size="default" variant="default"><a href={developerContactLink} target="_blank" rel="noopener noreferrer">{developerContactButtonText}</a></Button>
              )}
             </CardContent>
          </Card>
        </div>
       </section>

      {/* Секция FAQ */}
      <section className="mb-14 md:mb-16">
        <h2 className="text-2xl font-semibold mb-8 text-center md:text-left flex items-center gap-2 text-foreground">
          <HelpCircle className="h-6 w-6 text-primary"/>
          {faqSectionTitle}
        </h2>
         <div className="space-y-4">
           {faqItems.length > 0 ? (
             faqItems.map((item, index) => (
               <Card key={index} className="bg-card border border-border shadow-sm overflow-hidden rounded-lg">
                <CardHeader className="pb-2 pt-4 px-5">
                   <CardTitle className="text-base font-semibold text-foreground">{item.question}</CardTitle>
                </CardHeader>
                 <CardContent className="pb-4 px-5">
                   <div className="text-muted-foreground text-sm leading-relaxed space-y-2 max-w-none md:max-w-prose">
                    {item.answer.split('\n').map((line, i) => line.trim() && <p key={i}>{line}</p>)}
                   </div>
                 </CardContent>
               </Card>
            ))
          ) : (
             <Card className="bg-card border-border shadow-sm rounded-lg">
              <CardContent className="pt-6 pb-6">
                 <p className="text-muted-foreground text-center">{t('faq_loading_or_error')}</p>
              </CardContent>
             </Card>
          )}
        </div>
       </section>

      {/* Секция Фидбека */}
      <section>
         <Card className="bg-muted border-border shadow-sm rounded-lg">
           <CardHeader className="px-5 pt-5 pb-3">
             <CardTitle className="text-lg font-semibold flex items-center gap-2 text-foreground">
                <LifeBuoy className="h-5 w-5 text-primary"/>
                {feedbackCardTitle}
              </CardTitle>
           </CardHeader>
           <CardContent className="px-5 pb-5">
             <p className="mb-5 text-sm text-muted-foreground leading-relaxed">
               {feedbackCardText}
             </p>
              {feedbackContactLink && feedbackContactLink !== '#' && (
                <Button asChild size="default"><a href={feedbackContactLink} target="_blank" rel="noopener noreferrer">{feedbackButtonText}</a></Button>
             )}
          </CardContent>
         </Card>
       </section>
    </div>
  );
}

--- END OF FILE: src/app/faq/page.tsx ---

-------------------------------------------------------------------------------

--- START OF FILE: src/app/features/page.tsx ---

// src/app/features/page.tsx
"use client";
import React from "react";
import { useLanguage, iconMap } from "../_components/LanguageProvider"; // Путь к вашим компонентам
import { Card, CardContent, CardHeader, CardTitle } from "~/components/ui/card";

export default function FeaturesPage() {
  // Получаем весь объект контента
  const { currentContent } = useLanguage();
  // Берем фичи из объекта
  const features = currentContent.features || [];

  return (
    <div className="bg-muted border-t border-b border-border">
      <div className="container mx-auto px-4 py-16 md:py-20">
        <h1 className="text-3xl md:text-4xl font-bold mb-12 text-center">
          {currentContent.features_title || "Key Features"}
        </h1>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 items-stretch">
          {features.length > 0 ? (
              features.map((feature) => (
               <Card key={feature.id} className="bg-card border-border shadow-sm flex flex-col hover:shadow-lg transition-shadow duration-300">
                   <CardHeader>
                      <div className="flex items-center gap-3 mb-1">
                        <span className="text-primary">
                          {iconMap[feature.icon] || iconMap.Default}
                        </span>
                        <CardTitle className="text-xl font-semibold">
                          {feature.title} {/* Используем напрямую */}
                        </CardTitle>
                      </div>
                  </CardHeader>
                   <CardContent className="flex-grow">
                      <p className="text-muted-foreground leading-relaxed">
                        {feature.description} {/* Используем напрямую */}
                      </p>
                  </CardContent>
               </Card>
              ))
          ) : (
              <p className="text-center text-muted-foreground md:col-span-2 lg:col-span-3 py-10">
                 {currentContent.faq_loading_or_error || 'Features not loaded yet...'}
              </p>
          )}
        </div>
      </div>
    </div>
  );
}

--- END OF FILE: src/app/features/page.tsx ---

-------------------------------------------------------------------------------

--- START OF FILE: src/app/privacy/page.tsx ---

// src/app/privacy/page.tsx
"use client";

import React from "react";
import ReactMarkdown from "react-markdown";
import remarkGfm from 'remark-gfm';
import { Button } from "~/components/ui/button";
import { useLanguage } from "../_components/LanguageProvider"; // Путь к вашим компонентам
// УБРАЛИ Skeleton, он больше не нужен
import { Card, CardContent } from "~/components/ui/card";

export default function PrivacyPage() {
  // УБРАЛИ isLoadingContent из деструктуризации
  const { t, language } = useLanguage();

  // Получаем текст политики напрямую из currentContent или через t()
  // const privacyContent = currentContent?.privacy_policy_text || ""; // Вариант 1
  const privacyContent = t("privacy_policy_text", ""); // Вариант 2 (оставляем)

  // Получаем ссылки (остается как было)
  const supportChannelLink = t('support_channel_link', '#');
  const developerContactLink = t('developer_contact_link', '#');

  // --- УБРАЛИ БЛОК ЛОАДЕРА ---
  // if (isLoadingContent && !privacyContent) {
  //   return (
  //     ... скелетон ...
  //   );
  // }
  // --- КОНЕЦ УДАЛЕНИЯ ---

  // Сразу рендерим реальную страницу
  return (
    <div className="container mx-auto px-4 py-16">
      <h1 className="text-3xl md:text-4xl font-bold mb-10 text-center text-foreground">
        {t("privacy_policy_title", "Privacy Policy")}
      </h1>
      <Card className="max-w-4xl mx-auto bg-card p-6 md:p-10 rounded-lg shadow-md border border-border">
        <CardContent>
          <div className="markdown-content">
            <ReactMarkdown remarkPlugins={[remarkGfm]}>{privacyContent}</ReactMarkdown>
          </div>
          {/* Секция контактов */}
          <div className="mt-10 pt-6 border-t border-border">
             {/* ... код секции контактов ... */}
             <h2 className="text-xl font-semibold mb-4 text-foreground">
               {t('contact_info_title', language === "ru" ? "Контактная информация" : "Contact Information")}
            </h2>
             <p className="text-muted-foreground mb-5">
               {t('contact_info_text', language === "ru" ? "Если у вас есть вопросы по поводу политики конфиденциальности, свяжитесь с нами:" : "If you have questions about this privacy policy, please contact us:")}
            </p>
             <div className="flex flex-col sm:flex-row gap-3">
               {supportChannelLink && supportChannelLink !== '#' && supportChannelLink !== '[support_channel_link]' && (
                   <Button asChild variant="outline" className="bg-background border-border hover:bg-accent">
                     <a href={supportChannelLink} target="_blank" rel="noopener noreferrer">
                       {t('support_channel_button', language === "ru" ? "Канал поддержки" : "Support Channel")}
                    </a>
                  </Button>
              )}
               {developerContactLink && developerContactLink !== '#' && developerContactLink !== '[developer_contact_link]' && (
                   <Button asChild variant="outline" className="bg-background border-border hover:bg-accent">
                     <a href={developerContactLink} target="_blank" rel="noopener noreferrer">
                       {t('developer_contact_button', language === "ru" ? "Связаться с разработчиком" : "Contact Developer")}
                    </a>
                  </Button>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

--- END OF FILE: src/app/privacy/page.tsx ---

-------------------------------------------------------------------------------

--- START OF FILE: src/app/setup/page.tsx ---

// src/app/setup/page.tsx
"use client";

import React, { useState } from "react";
import { QRCodeSVG } from "qrcode.react";
import { Button } from "~/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "~/components/ui/card";
import { useLanguage } from "../_components/LanguageProvider";

export default function SetupPage() {
  const { t, language } = useLanguage();
  const [showQrEnlarged, setShowQrEnlarged] = useState(false);

  const botUsername = t("telegram_bot_username", "LetopisetsChatBot");
  const telegramLink = `https://t.me/${botUsername}?startgroup=true`;

  return (
    <div className="container mx-auto px-4 py-16">
      <h1 className="text-3xl md:text-4xl font-bold mb-8 text-center">
        {t("setup_title", "Setup & Configuration")}
      </h1>
      <p className="text-lg mb-10 text-center text-muted-foreground max-w-2xl mx-auto">{t("setup_intro")}</p>

       {/* Секция с QR и копированием */}
       <div className="flex flex-col items-center mb-16"> {/* Центрируем все содержимое по горизонтали, увеличиваем нижний отступ */}

        <h2 className="text-xl md:text-2xl font-semibold mb-3 text-center">
          {t('qr_code_title_centered', language === "ru" ? "Быстрый старт с QR" : "Quick Start with QR")}
        </h2>
        <p className="text-center text-muted-foreground mb-6 max-w-md"> {/* Увеличиваем нижний отступ и максимальную ширину */}
          {t('qr_code_subtitle_centered', language === "ru" ? "Наведите камеру вашего телефона на QR-код, чтобы быстро добавить Летописца Чата в вашу Telegram-группу." : "Point your phone's camera at the QR code to quickly add Chat Chronicler to your Telegram group.")}
        </p>

        {/* Контейнер для QR-кода */}
        <div
          className="bg-white p-4 rounded-lg cursor-pointer mb-2 shadow-lg hover:shadow-xl transition-shadow duration-300 inline-block" // Увеличиваем padding и тень
          onClick={() => setShowQrEnlarged(!showQrEnlarged)}
          title={t('qr_code_enlarge_title', language === 'ru' ? 'Нажмите для увеличения' : 'Click to enlarge')}
        >
          <QRCodeSVG
            value={telegramLink}
            size={showQrEnlarged ? 250 : 160} // Увеличиваем базовый размер
            level="H"
            includeMargin={false} // Убираем лишнюю рамку
            bgColor="#ffffff"
            fgColor="#0B1120" // Темный цвет модулей
          />
        </div>
        <p className="text-sm text-muted-foreground"> {/* Текст подсказки */}
          {t('qr_code_enlarge_hint', language === "ru" ? "(Нажмите для увеличения)" : "(Click to enlarge)")}
        </p>

      </div>


      {/* Пошаговая инструкция */}
      <div className="max-w-2xl mx-auto">
        <h2 className="text-2xl font-bold mb-8 text-center"> {/* Увеличен отступ снизу */}
            {t('step_by_step_title', language === 'ru' ? 'Пошаговая инструкция' : 'Step-by-Step Guide')}
        </h2>
        <div className="space-y-6">
          {/* Шаг 1 */}
          <Card className="bg-card border-border shadow-sm">
            <CardHeader><CardTitle className="flex items-center gap-3">
               <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground font-semibold">1</div>
               <span className="text-lg">{t("step1_title")}</span>
            </CardTitle></CardHeader>
            <CardContent>
              <p className="mb-4 text-muted-foreground">{t("step1_text")}</p>
              <Button asChild size="sm">
                 <a href={telegramLink} target="_blank" rel="noopener noreferrer">
                   {t("cta_button")}
                 </a>
              </Button>
            </CardContent>
          </Card>
          {/* Шаг 2 */}
          <Card className="bg-card border-border shadow-sm">
             <CardHeader><CardTitle className="flex items-center gap-3">
               <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground font-semibold">2</div>
                <span className="text-lg">{t("step2_title")}</span>
            </CardTitle></CardHeader>
            <CardContent>
               <p className="mb-4 text-muted-foreground">{t("step2_text")}</p>
               <div className="bg-muted/50 p-4 rounded-lg border">
                  <h3 className="font-semibold mb-2 text-base">{t("setup_permissions_title")}</h3> {/* Уменьшил h3 */}
                 <p className="text-sm text-muted-foreground">{t("setup_permissions_text")}</p>
              </div>
            </CardContent>
          </Card>
           {/* Шаг 3 */}
          <Card className="bg-card border-border shadow-sm">
             <CardHeader><CardTitle className="flex items-center gap-3">
               <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground font-semibold">3</div>
                 <span className="text-lg">{t("step3_title")}</span>
            </CardTitle></CardHeader>
            <CardContent>
              <p className="mb-4 text-muted-foreground">{t("step3_text")}</p>
              <div className="mt-4 p-3 bg-muted/50 rounded-lg border inline-block">
                 <code className="font-mono text-sm">/story_settings</code>
              </div>
               <p className="text-xs text-muted-foreground mt-2 italic">{t('settings_admin_only', language === 'ru' ? '(Команда доступна только администраторам чата)' : '(Command available only to chat administrators)')}</p> {/* Уменьшил и сделал курсивом */}
            </CardContent>
          </Card>
           {/* Шаг 4 */}
          <Card className="bg-card border-border shadow-sm">
             <CardHeader><CardTitle className="flex items-center gap-3">
               <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground font-semibold">4</div>
                 <span className="text-lg">{t("step4_title")}</span>
            </CardTitle></CardHeader>
            <CardContent>
               <p className="text-muted-foreground">{t("step4_text")}</p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

--- END OF FILE: src/app/setup/page.tsx ---

-------------------------------------------------------------------------------

--- START OF FILE: src/app/_components/LanguageProvider.tsx ---

// src/app/_components/LanguageProvider.tsx
"use client";

import React, {
  useState,
  useEffect,
  createContext,
  useContext,
  ReactNode,
  Dispatch,
  SetStateAction,
} from "react";
// Убрали useQuery и apiClient
import { ruContent } from '~/content/ru';
import { enContent } from '~/content/en';
import type { ContentData } from '~/content/types'; // Импорт типов
import {
  BookOpen,
  UserCircle,
  Image,
  BarChart,
  Settings,
  LucideProps, // Импортируем тип для иконок
} from "lucide-react";

export type Language = "ru" | "en";

// Карта иконок
// Добавляем aria-hidden="true", чтобы скринридеры игнорировали декоративные иконки
// Или можно добавить осмысленный <title> внутрь SVG, если иконка несет смысл
export const iconMap: Record<string, React.ReactElement<LucideProps>> = {
  BookOpen: <BookOpen className="h-6 w-6" aria-hidden="true" />,
  UserCircle: <UserCircle className="h-6 w-6" aria-hidden="true" />,
  Image: <Image className="h-6 w-6" aria-hidden="true" />,
  BarChart: <BarChart className="h-6 w-6" aria-hidden="true" />,
  Settings: <Settings className="h-6 w-6" aria-hidden="true" />,
  Default: <BookOpen className="h-6 w-6" aria-hidden="true" />,
};

// Тип для значения Контекста
interface LanguageContextType {
  language: Language;
  setLanguage: Dispatch<SetStateAction<Language>>;
  // --- ИЗМЕНЕНИЕ: t теперь возвращает только string или undefined ---
  t: (key: string, fallback?: string) => string | undefined;
  // Оставляем currentContent для доступа к массивам
  currentContent: ContentData;
}

// Создание Контекста
const LanguageContext = createContext<LanguageContextType>({
  language: "en",
  setLanguage: () => {},
  // --- ИЗМЕНЕНИЕ: Дефолтный t тоже возвращает string | undefined ---
  t: (key, fallback) => fallback ?? undefined,
  currentContent: enContent,
});

// Компонент Провайдера
export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState<Language>('en');

  // Загрузка языка
  useEffect(() => {
    let initialLang: Language = "en";
    const savedLanguage = localStorage.getItem("preferredLanguage");
    if (savedLanguage === "ru" || savedLanguage === "en") {
      initialLang = savedLanguage;
    } else {
      if (typeof window !== "undefined") {
        const browserLang = navigator.language.toLowerCase();
        initialLang = browserLang.startsWith("ru") ? "ru" : "en";
      }
    }
    // Установка языка только при необходимости
     if (initialLang !== language) { // Проверка, чтобы избежать лишнего ререндера
       setLanguage(initialLang);
     }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Оставляем пустым, т.к. language здесь не нужен и вызовет цикл

  // Сохранение языка
  useEffect(() => {
     if (language) {
       localStorage.setItem("preferredLanguage", language);
     }
  // --- ИСПРАВЛЕН МАССИВ ЗАВИСИМОСТЕЙ ---
  }, [language]); // Добавили language
  // --- КОНЕЦ ИСПРАВЛЕНИЯ ---

  // Выбираем контент
  const currentContent = language === 'ru' ? ruContent : enContent;

  // Функция перевода
  // --- ИСПРАВЛЕН ТИП ВОЗВРАЩАЕМОГО ЗНАЧЕНИЯ и ЛОГИКА t ---
  const t = (key: string, fallback?: string): string | undefined => {
    if (key in currentContent) {
      const value = currentContent[key as keyof ContentData];
      // Проверяем, что значение является строкой
      if (typeof value === 'string') {
        return value; // Возвращаем строку
      } else {
         // Если значение не строка (массив или др.), логируем и возвращаем fallback/undefined
         console.warn(`Value for key "${key}" is not a string.`);
         return fallback;
      }
    }
    console.warn(`Translation key not found: "${key}" for language "${language}"`);
    return fallback;
  };

  return (
    <LanguageContext.Provider
      value={{
        language,
        setLanguage,
        t,
        currentContent,
      }}
    >
      {children}
    </LanguageContext.Provider>
  );
}

// Хук для использования Контекста
export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return context;
}

--- END OF FILE: src/app/_components/LanguageProvider.tsx ---

-------------------------------------------------------------------------------

--- START OF FILE: src/app/_components/SiteLayout.tsx ---

// src/app/_components/SiteLayout.tsx
"use client";

import React, { useState, useEffect, ReactNode } from "react";
import Link from "next/link"; // Используем Link из Next.js для навигации
import { usePathname } from "next/navigation"; // Хук для получения текущего пути
import { useLanguage } from "./LanguageProvider"; // Наш хук для доступа к языку и переводам
import { Button } from "~/components/ui/button"; // Импортируем UI компоненты (shadcn/ui)
import { Menu, X, Globe } from "lucide-react"; // Иконки

// Определяем тип для пропсов компонента
interface SiteLayoutProps {
  children: ReactNode; // Дочерние элементы, которые будут обернуты макетом (наши страницы)
}

export default function SiteLayout({ children }: SiteLayoutProps) {
  // Получаем необходимые данные и функции из контекста языка
  const { language, setLanguage, t } = useLanguage();
  // Состояние для открытия/закрытия мобильного меню
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  // Получаем текущий путь страницы
  const pathname = usePathname();

  // Эффект для автоматического закрытия мобильного меню при смене страницы
  useEffect(() => {
    setIsMenuOpen(false);
  }, [pathname]); // Зависимость от pathname

  // Функция для переключения языка
  const toggleLanguage = () => {
    setLanguage((prevLang) => (prevLang === "ru" ? "en" : "ru"));
  };

  // Получаем имя пользователя бота для ссылки "Добавить в Telegram"
  const botUsername = t("telegram_bot_username", "LetopisetsChatBot");
  const telegramLink = `https://t.me/${botUsername}?startgroup=true`;

  // Массив навигационных ссылок для удобства рендеринга
  const navLinks = [
    { href: "/", labelKey: "hero_title", split: true },
    { href: "/features", labelKey: "features_title" },
    { href: "/setup", labelKey: "setup_title" },
    { href: "/privacy", labelKey: "privacy_policy_title" },
    { href: "/faq", labelKey: "faq_page_title",
      labelRu: "Поддержка / FAQ", labelEn: "Support / FAQ"
     },
  ];

  // Хелпер функция для получения текста ссылки
  const getNavLinkLabel = (link: typeof navLinks[0]): string => {
    // Сначала проверяем прямые значения для текущего языка
    if (link.labelRu && language === 'ru') return link.labelRu;
    if (link.labelEn && language === 'en') return link.labelEn;

    // Получаем перевод через t(), который может вернуть string или undefined
    const translated = t(link.labelKey);

    // --- ИСПРАВЛЕНИЕ ЗДЕСЬ ---
    // Проверяем, что translated - это строка и нужно ли ее делить
    if (typeof translated === 'string') {
        // Если нужно делить (split: true) и строка содержит ':', делим
        if (link.split && translated.includes(':')) {
            return translated.split(":")[0];
        }
        // Иначе возвращаем строку как есть
        return translated;
    }
    // --- КОНЕЦ ИСПРАВЛЕНИЯ ---

    // Если перевод не найден (translated === undefined), возвращаем ключ как fallback
    // Или можно вернуть пустую строку ''
    return `[${link.labelKey}]`;
};

  return (
    <div className="min-h-screen flex flex-col">
      {/* Шапка сайта */}
      <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container mx-auto px-4 h-16 flex items-center justify-between">
          {/* Логотип/Название сайта */}
           <Link href="/" className="text-xl font-bold mr-4 flex-shrink-0">
             {t('site_name', language === "ru" ? "Летописец Чата" : "Chat Chronicler")}
          </Link>

          {/* Навигация для десктопа */}
          <nav className="hidden md:flex flex-grow items-center gap-1 lg:gap-2 justify-end"> {/* Уменьшены gap */}
            {navLinks.map((link) => (
              <Link key={link.href} href={link.href} passHref> {/* Убран legacyBehavior */}
                <Button
                  variant={pathname === link.href ? "secondary" : "ghost"}
                  size="sm" // Уменьшен размер кнопок навигации
                  asChild
                >
                  {/* Тег <a> НЕ НУЖЕН */}
                  <span>{getNavLinkLabel(link)}</span>
                </Button>
              </Link>
            ))}
             {/* Кнопка смены языка */}
            <Button
              variant="ghost"
              size="icon"
              onClick={toggleLanguage}
              aria-label={t('toggle_language_aria', 'Toggle language')}
            >
              <Globe className="h-5 w-5" />
            </Button>
             {/* Кнопка "Добавить в Telegram" */}
            <Button asChild size="sm">
               {/* Убран тег <a> */}
              <a href={telegramLink} target="_blank" rel="noopener noreferrer">
                {t("cta_button", "Add to Telegram")}
              </a>
            </Button>
          </nav>

           {/* Кнопки для мобильного меню */}
          <div className="flex items-center gap-2 md:hidden">
            <Button
              variant="ghost"
              size="icon"
              onClick={toggleLanguage}
              aria-label={t('toggle_language_aria', 'Toggle language')}
            >
              <Globe className="h-5 w-5" />
            </Button>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              aria-label={t('toggle_menu_aria', 'Toggle menu')}
            >
              {isMenuOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
            </Button>
          </div>
        </div>

        {/* Выпадающее мобильное меню */}
        {isMenuOpen && (
          <div className="md:hidden border-t bg-background shadow-md">
            <div className="container mx-auto px-4 py-4">
              <nav className="flex flex-col gap-3">
                {navLinks.map((link) => (
                  <Link key={link.href} href={link.href} passHref> {/* Убран legacyBehavior */}
                     <Button
                        variant={pathname === link.href ? "secondary" : "ghost"}
                        className="w-full justify-start text-base"
                        asChild
                     >
                        {/* Тег <a> НЕ НУЖЕН */}
                       <span>{getNavLinkLabel(link)}</span>
                    </Button>
                  </Link>
                ))}
                <Button asChild className="mt-4 text-base">
                   {/* Убран тег <a> */}
                  <a href={telegramLink} target="_blank" rel="noopener noreferrer">
                    {t("cta_button", "Add to Telegram")}
                  </a>
                </Button>
              </nav>
            </div>
          </div>
        )}
      </header>

      {/* Основной контент страницы (передается через children) */}
      <main className="flex-grow">
        {children}
      </main>

      {/* Подвал сайта */}
      <footer className="bg-muted py-6 mt-auto">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center gap-4">
            <div className="text-sm text-muted-foreground">
              {t("footer_copyright", `© ${new Date().getFullYear()} Chat Chronicler`)}
            </div>
            <div className="flex flex-wrap justify-center gap-x-4 gap-y-2"> {/* Добавлен flex-wrap */}
               {/* Убран legacyBehavior и тег <a> */}
              <Link href="/privacy" className="text-sm text-muted-foreground hover:text-foreground">
                  {t("privacy_policy_title", "Privacy Policy")}
              </Link>
              <Link href="/faq" className="text-sm text-muted-foreground hover:text-foreground">
                   {t('faq_link_footer', language === "ru" ? "Поддержка / FAQ" : "Support / FAQ")}
              </Link>
               {/* Ссылка на канал поддержки */}
               {t('support_channel_link', '#') !== '#' && t('support_channel_link') !== '[support_channel_link]' && ( // Улучшенная проверка
                 <a href={t('support_channel_link')} target="_blank" rel="noopener noreferrer" className="text-sm text-muted-foreground hover:text-foreground">
                   {t('support_channel_text', 'Support Channel')}
                 </a>
               )}
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

--- END OF FILE: src/app/_components/SiteLayout.tsx ---

-------------------------------------------------------------------------------

===============================================================================
 КОНЕЦ БАНДЛА
===============================================================================
